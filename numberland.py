
from queue import Queue


class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        count = 0
        
        h = len(grid)
        l = len(grid[0])
        visited = set()
        q = Queue()
        
        for i in range(h):
            for j in range(l):
                if (i, j) not in visited and grid[i][j] == '1':
                    q.put((i, j))
                    visited.add((i, j))
                    while not q.empty():
                        x, y = q.get()
                        if x > 0 and grid[x-1][y] == '1' and (x-1, y) not in visited:
                            q.put((x-1, y))
                            visited.add((x-1, y))
                        if y > 0 and grid[x][y-1] == '1' and (x, y-1) not in visited:
                            q.put((x, y-1))
                            visited.add((x, y-1))

                        if x < h-1 and grid[x+1][y] == '1' and (x+1, y) not in visited:
                            q.put((x+1, y))
                            visited.add((x+1, y))
                        if y < l-1 and grid[x][y+1] == '1' and (x, y+1) not in visited:
                            q.put((x, y+1))
                            visited.add((x, y+1))
                    count += 1
        return count


if __name__ == '__main__':

# 11000
# 11000
# 00100
# 00011
    
    g = [ [] for i in range(4)]
    g[0] = list('11000')
    g[1] = list('11000')
    g[2] = list('00100')
    g[3] = list('00011')

    # g = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

    print(len(g))
    print(len(g[0]))

    s = Solution()
    print(s.numIslands(g))

